@page "/login"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.WebUtilities
@using Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<PageTitle>Login</PageTitle>

<EditForm EditContext="_editContext" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />

    <div class="flex flex-col justify-center items-center text-center min-h-screen">
        <h1 style="color: #e6ddcb;" class="mb-3">Login</h1>

        <div class="validation-wrapper mb-2">
            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
            <div class="validation-wrapper">
                <p class="validation-message">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                        <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0M7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0z"/>
                    </svg>
                    @_errorMessage
                </p>
            </div>
            }
        </div>

        <div class="login-inputs-container gap-3 mx-5 mb-3">
            <div class="input-container">
                <label class="floating-label text-start @(string.IsNullOrWhiteSpace(_loginRequest.EmailOrUsername) ? "hidden" : "")">
                    Email or Username
                </label>
                <InputText id="emailOrUsername"
                           @bind-Value="@_loginRequest.EmailOrUsername"
                           class="@($"form-control login-input text-center px-4 py-2 rounded-pill {GetInputCss(nameof(_loginRequest.EmailOrUsername))}")"
                           placeholder="Email or Username"
                           oninput="@( (ChangeEventArgs e) => UpdateField(e, val => _loginRequest.EmailOrUsername = val, nameof(_loginRequest.EmailOrUsername)) )" />            </div>
            <div class="validation-wrapper">
                <ValidationMessage For="@(() => _loginRequest.EmailOrUsername)" />
            </div>

            <div class="input-container">
                <label class="floating-label text-start @(string.IsNullOrWhiteSpace(_loginRequest.Password) ? "hidden" : "")">
                    Password
                </label>
                <InputText @bind-Value="_loginRequest.Password"
                           type="password"
                           class="@($"form-control login-input password-input text-center px-4 py-2 rounded-pill {GetInputCss(nameof(_loginRequest.Password))}")"
                           placeholder="Password"
                           oninput="@( (ChangeEventArgs e) => UpdateField(e, val => _loginRequest.Password = val, nameof(_loginRequest.Password)) )" />
            </div>
            <div class="validation-wrapper">
                <ValidationMessage For="@(() => _loginRequest.Password)" />
            </div>
        </div>

        <div class="login-buttons-container">
            <button type="submit" class="login-button text-center px-4 py-2 rounded-pill">Login</button>
            <button type="button" class="create-account-button text-center px-4 py-2 rounded-pill" @onclick="NavigateToRegister">Create An Account</button>
        </div>
        <div class="welcome-wrapper mt-5">
            @if (_showWelcome)
            {
                <p class="welcome-message @(_fadeOutWelcome ? "fade-out" : "")">@_welcomeMessage</p>
            }
        </div>
    </div>
</EditForm>


@code {
    private LoginRequest _loginRequest = new();
    private string? _errorMessage;
    private string? _welcomeMessage;
    private bool _showWelcome = false;
    private bool _fadeOutWelcome = false;

 
    private EditContext _editContext;
    private ValidationMessageStore _validationMessageStore;

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(_loginRequest);
        _validationMessageStore = new ValidationMessageStore(_editContext);

        _editContext.OnFieldChanged += (sender, args) =>
        {
            _validationMessageStore.Clear(args.FieldIdentifier);
            _editContext.NotifyValidationStateChanged();

            // Clear global error once the user interacts again
            _errorMessage = null;
        };

        await DisplayWelcomeMessage();
    }

    private async Task DisplayWelcomeMessage()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("message", out var msgType) &&
            query.TryGetValue("user", out var user))
        {
            if (msgType == "WelcomeUser")
            {
                _welcomeMessage = $"Welcome, {user}. Please sign in.";
                _showWelcome = true;

                await Task.Delay(5000);
                _fadeOutWelcome = true;
                StateHasChanged();

                await Task.Delay(1000); // Fade out duration
                _showWelcome = false;
                _fadeOutWelcome = false;
                StateHasChanged();
            }
        }
    }
    
    private void UpdateField(ChangeEventArgs e, Action<string> setter, string propertyName)
    {
        // Safely convert the event value to string
        var newValue = e.Value?.ToString() ?? string.Empty;
        // Set the target field using the provided setter
        setter(newValue);
        // Notify the EditContext that the field has changed for validation
        _editContext.NotifyFieldChanged(new FieldIdentifier(_loginRequest, propertyName));
    }



    private async Task HandleLogin()
    {
        _validationMessageStore.Clear();
        _errorMessage = null;

        if (!_editContext.Validate())
            return;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", _loginRequest);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TokenResponse>();
                if (result != null)
                {
                    await LocalStorage.SetItemAsync("authToken", result.Token);
                    Navigation.NavigateTo("/home");
                }
            }
            else
            {
                var errorObj = await response.Content.ReadFromJsonAsync<SimpleError>();
                _errorMessage = errorObj?.Message ?? "Invalid login credentials.";
            }
        }
        catch
        {
            _errorMessage = "An error occurred. Please try again.";
        }

        _editContext.NotifyValidationStateChanged();
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    private string GetInputCss(string fieldName)
    {
        var field = new FieldIdentifier(_loginRequest, fieldName);
        return _editContext.GetValidationMessages(field).Any() ? "is-invalid" : "";
    }

    public class SimpleError
    {
        public string Message { get; set; } = string.Empty;
    }
}

