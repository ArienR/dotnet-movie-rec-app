@page "/register"
@using MovieRecApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Register</PageTitle>

<EditForm EditContext="_editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="flex flex-col justify-center items-center text-center min-h-screen">
        <h1 style="color: #e6ddcb;" class="mb-5">Create an Account</h1>
        <div class="login-inputs-container gap-3 mx-5 mb-2">
            <div class="input-container">
                <label class="floating-label text-start @(string.IsNullOrWhiteSpace(_registerRequest.UserName) ? "hidden" : "")">
                    Username
                </label>
                <InputText id="username"
                           @bind-Value="_registerRequest.UserName"
                           class="@($"form-control login-input text-center px-4 py-2 rounded-pill {GetInputCss(nameof(_registerRequest.UserName))}")"
                           placeholder="Username"
                           oninput="@( (ChangeEventArgs e) => UpdateField(e, val => _registerRequest.UserName = val, nameof(_registerRequest.UserName)) )" />
            </div>
            <div class="validation-wrapper">
                <ValidationMessage For="@(() => _registerRequest.UserName)" />
            </div>

            <div class="input-container">
                <label class="floating-label text-start @(string.IsNullOrWhiteSpace(_registerRequest.Email) ? "hidden" : "")">
                    Email
                </label>
                <InputText id="email"
                           @bind-Value="_registerRequest.Email"
                           class="@($"form-control login-input text-center px-4 py-2 rounded-pill {GetInputCss(nameof(_registerRequest.Email))}")"
                           placeholder="Email"
                           oninput="@( (ChangeEventArgs e) => UpdateField(e, val => _registerRequest.Email = val, nameof(_registerRequest.Email)) )" />
            </div>
            <div class="validation-wrapper">
                <ValidationMessage For="@(() => _registerRequest.Email)" />
            </div>

            <div class="input-container">
                <label class="floating-label text-start @(string.IsNullOrWhiteSpace(_registerRequest.Password) ? "hidden" : "")">
                    Password
                </label>
                <InputText id="password"
                           type="password"
                           @bind-Value="_registerRequest.Password"
                           class="@($"form-control login-input text-center px-4 py-2 rounded-pill {GetInputCss(nameof(_registerRequest.Password))}")"
                           placeholder="Password"
                           oninput="@( (ChangeEventArgs e) => UpdateField(e, val => _registerRequest.Password = val, nameof(_registerRequest.Password)) )" />
            </div>
            <div class="validation-wrapper">
                <ValidationMessage For="@(() => _registerRequest.Password)" />
            </div>

            <div class="input-container">
                <label class="floating-label text-start @(string.IsNullOrWhiteSpace(_registerRequest.ConfirmPassword) ? "hidden" : "")">
                    Confirm Password
                </label>
                <InputText id="confirm-password"
                           type="password"
                           @bind-Value="_registerRequest.ConfirmPassword"
                           class="@($"form-control login-input text-center px-4 py-2 rounded-pill {GetInputCss(nameof(_registerRequest.ConfirmPassword))}")"
                           placeholder="Confirm Password"
                           oninput="@( (ChangeEventArgs e) => UpdateField(e, val => _registerRequest.ConfirmPassword = val, nameof(_registerRequest.ConfirmPassword)) )" />
            </div>
            <div class="validation-wrapper">
                <ValidationMessage For="@(() => _registerRequest.ConfirmPassword)" />
            </div>
        </div>

        <div class="login-buttons-container">
            <button type="submit" class="login-button text-center px-4 py-2 rounded-pill">
                Register
            </button>
        </div>
    </div>
</EditForm>


@code {
    private RegisterRequest _registerRequest = new();
    private EditContext _editContext;
    private ValidationMessageStore _validationMessageStore;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_registerRequest);
        _validationMessageStore = new ValidationMessageStore(_editContext);

        _editContext.OnFieldChanged += (sender, args) =>
        {
            _validationMessageStore.Clear(args.FieldIdentifier);
            _editContext.NotifyValidationStateChanged();
        };
    }

    private async Task HandleValidSubmit()
    {
        _validationMessageStore.Clear();

        var response = await Http.PostAsJsonAsync("api/auth/register", _registerRequest);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login?message=WelcomeUser&user=" + _registerRequest.UserName);
            return;
        }

        try
        {
            var errorDictionary = await response.Content.ReadFromJsonAsync<Dictionary<string, string[]>>();
            if (errorDictionary != null && errorDictionary.Any())
            {
                foreach (var error in errorDictionary)
                {
                    var propertyName = error.Key.Split('.').Last();
                    var fieldIdentifier = new FieldIdentifier(_registerRequest, propertyName);
                    foreach (var errMsg in error.Value)
                    {
                        _validationMessageStore.Add(fieldIdentifier, errMsg);
                    }
                }
            }
            else
            {
                var simpleError = await response.Content.ReadFromJsonAsync<SimpleError>();
                if (simpleError != null && !string.IsNullOrEmpty(simpleError.Message))
                {
                    AddServerError(simpleError.Message);
                }
            }
        }
        catch
        {
            var fallback = await response.Content.ReadFromJsonAsync<SimpleError>();
            if (fallback != null && !string.IsNullOrEmpty(fallback.Message))
            {
                AddServerError(fallback.Message);
            }
        }

        _editContext.NotifyValidationStateChanged();
    }

    private void AddServerError(string message)
    {
        FieldIdentifier fieldIdentifier;

        if (message.Contains("Username", StringComparison.OrdinalIgnoreCase))
            fieldIdentifier = new FieldIdentifier(_registerRequest, nameof(_registerRequest.UserName));
        else if (message.Contains("Email", StringComparison.OrdinalIgnoreCase))
            fieldIdentifier = new FieldIdentifier(_registerRequest, nameof(_registerRequest.Email));
        else if (message.Contains("Password", StringComparison.OrdinalIgnoreCase))
            fieldIdentifier = new FieldIdentifier(_registerRequest, nameof(_registerRequest.ConfirmPassword));
        else
            fieldIdentifier = new FieldIdentifier(_registerRequest, nameof(_registerRequest.Email));

        _validationMessageStore.Add(fieldIdentifier, message);
    }

    private string GetInputCss(string fieldName)
    {
        var field = new FieldIdentifier(_registerRequest, fieldName);
        return _editContext.GetValidationMessages(field).Any() ? "is-invalid" : string.Empty;
    }

    public class SimpleError
    {
        public string Message { get; set; } = string.Empty;
    }
    
    private void UpdateField(ChangeEventArgs e, Action<string> setter, string propertyName)
    {
        // Safely convert the event value to string
        var newValue = e.Value?.ToString() ?? string.Empty;
        // Set the target field using the provided setter
        setter(newValue);
        // Notify the EditContext that the field has changed for validation
        _editContext.NotifyFieldChanged(new FieldIdentifier(_registerRequest, propertyName));
    }
}

